#lang racket

(provide (all-defined-out))

;; Un triplet pitagoreic primitiv (TPP) este format din 
;; 3 numere naturale nenule a, b, c cu proprietățile:
;;    a^2 + b^2 = c^2
;;    a, b, c prime între ele
;;
;; TPP pot fi generate sub formă de arbore (infinit) cu
;; rădăcina (3,4,5), pe baza a 3 transformări matriciale:
;;
;;      |-1 2 2|        |1 2 2|        |1 -2 2|
;; T1 = |-2 1 2|   T2 = |2 1 2|   T3 = |2 -1 2|
;;      |-2 2 3|        |2 2 3|        |2 -2 3|
;;
;;                         (3,4,5)
;;              ______________|______________
;;             |              |              |
;;         (15,8,17)      (21,20,29)     (5,12,13)
;;       ______|______  ______|______  ______|______
;;      |      |      ||      |      ||      |      |
;; (35,12,37) ..........................................
;;
;; unde:
;; (15, 8,17) = T1·(3,4,5)
;; (21,20,29) = T2·(3,4,5)
;; ( 5,12,13) = T3·(3,4,5) etc.
;;
;; În această reprezentare, TPP sunt indexate "de sus în jos",
;; respectiv "de la stânga la dreapta", rezultând ordinea:
;; (3,4,5) (15,8,17) (21,20,29) (5,12,13) (35,12,37) ... etc.

;; Reprezentăm matricile T1, T2, T3 ca liste de liste:
(define T1 '((-1 2 2) (-2 1 2) (-2 2 3)))
(define T2 '( (1 2 2)  (2 1 2)  (2 2 3)))
(define T3 '((1 -2 2) (2 -1 2) (2 -2 3)))


; TODO
; Implementați o funcție care calculează produsul scalar
; a doi vectori X și Y (reprezentați ca liste).
; Se garantează că X și Y au aceeași lungime.
; Ex: (-1,2,2)·(3,4,5) = -3 + 8 + 10 = 15
; Utilizați recursivitate pe stivă.
(define (dot-product X Y)
  (if (null? X)
      0
      (+ (* (car X) (car Y)) (dot-product (cdr X) (cdr Y)) ))
  )


; TODO
; Implementați o funcție care calculează produsul dintre
; o matrice M și un vector V (puneți V "pe verticală").
; Se garantează că M și V au dimensiuni compatibile.
; Ex: |-1 2 2| |3|   |15|
;     |-2 1 2|·|4| = | 8|
;     |-2 2 3| |5|   |17|
; Utilizați recursivitate pe coadă.
(define (sum-of-multyply M V res)
  (if (null? M)
      res
      (sum-of-multyply (cdr M) V (append res (list (dot-product (car M) V))))
      )
  )

(define (multiply M V)
  (sum-of-multyply M V null))


; TODO
; Implementați o funcție care primește un număr n și
; întoarce o listă numerică (unde elementele au valoarea
; 1, 2 sau 3), reprezentând secvența de transformări prin
; care se obține, plecând de la (3,4,5), al n-lea TPP
; din arbore.
; Ex: (get-transformations 8) întoarce '(2 1), adică
; al 8-lea TPP din arbore se obține din T1·T2·(3,4,5).
; Sunteți încurajați să folosiți funcții ajutătoare
; (de exemplu pentru determinarea nivelului din arbore 
; pe care se află n, sau a indexului minim/maxim de pe 
; nivelul respectiv, etc.)

(define (pow-base-3 n)
  (if (zero? n)
      1
      (* 3 (pow-base-3 (- n 1)))
      )
  )

(define (level-max-min-index n max level min)
  (if (>= max n) ; s-a gasit cel mai mare index de pe rand, mai mare decat n
      (list (sub1 level) max (+ 1 (- max (pow-base-3 (sub1 level)))))
      (level-max-min-index n (+ max (pow-base-3 level)) (+ level 1) min)
      )
  )

; diferenta este partea intreaga a impartirii prin 3
; a diferentei dintre indexul maxim si indexul minim
; adica, de la primul index pana la ultimul, se poate
; ajunge prin 3 adunari repetate cu aceasta diferenta
(define (difference min max)
  (quotient (- max min) 3)
  )

(define (create-list n level min max diff)
  ; daca s-a ajuns la nivelul 0 se returneaza null
  (if (<= level 0)
      '()
      ; daca diferenta este 0, inseamna ca sunt ultimii 3 termeni
      (if (zero? diff)
          (cond
            ((= n min) '(1)) ; indexul este cel mai mic
            ((= n max) '(3)) ; indexul este cel mai mare
            (else '(2)) ; indexul este la jumatate
            )
          (cond
            ; daca n este mai mic decat prima margine superioara
            ; inseamna ca face parte din prima treime
            ((<= n (+ min diff))
             (append '(1) (create-list n (sub1 level)
                                       min (+ min diff)
                                       (difference min (+ min diff)))))
            ; daca n este mai mare decat ultima margine inferioara
            ; inseamna ca face parte din ultima treime
            ((>= n (- max diff))
             (append '(3) (create-list n (sub1 level)
                                       (- max diff) max
                                       (difference (- max diff) max))))
            ; altfel face parte din a doua treime
            (else (append '(2) (create-list n (sub1 level)
                                            (+ 1 (+ min diff))
                                            (- (- max diff) 1)
                                            (difference (+ 1 (+ min diff))
                                                        (- (- max diff) 1)))))
            )
          )
      )
  )

(define (get-transformations n)
  (create-list n
               (car (level-max-min-index n 0 0 0)) ; nivelul pe care se afla n
               (caddr (level-max-min-index n 0 0 0)) ; indexul maxim de pe nivel
               (cadr (level-max-min-index n 0 0 0)) ; indexul minim de pe nivel
               ; diferenta dintre indecsi
               (difference (caddr (level-max-min-index n 0 0 0))
                           (cadr (level-max-min-index n 0 0 0))))
  )

; TODO
; Implementați o funcție care primește o listă Ts de 
; tipul celei întoarsă de get-transformations, respectiv 
; un triplet de start ppt și întoarce tripletul rezultat
; în urma aplicării transformărilor din Ts asupra ppt.
; Utilizați recursivitate pe coadă.
(define (function Ts ppt)
  (if (null? Ts)
      ppt
      (cond
        ((= (car Ts) 1) (function (cdr Ts) (multiply T1 ppt)))
        ((= (car Ts) 2) (function (cdr Ts) (multiply T2 ppt)))
        ( else (function (cdr Ts) (multiply T3 ppt)))
        )
      )
  )

(define (apply-matrix-transformations Ts ppt)
  (function Ts ppt))


; TODO
; Implementați o funcție care calculează al n-lea TPP
; din arbore, folosind funcțiile anterioare.
(define (get-nth-ppt-from-matrix-transformations n)
  (apply-matrix-transformations (get-transformations n) (list 3 4 5))
  )
